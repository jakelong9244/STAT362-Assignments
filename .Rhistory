#Q3c
ggarrange(Hitters %>%
ggplot(mapping=aes(x=Salary))+
geom_histogram(bins=20),
Hitters %>%
ggplot(mapping=aes(x=Salary))+
geom_density())
library(tidyverse)
library(ggpubr)
#Q3c
ggarrange(Hitters %>%
ggplot(mapping=aes(x=Salary))+
geom_histogram(bins=20),
Hitters %>%
ggplot(mapping=aes(x=Salary))+
geom_density())
#Q1
library(ISLR2)
#Q3c
ggarrange(Hitters %>%
ggplot(mapping=aes(x=Salary))+
geom_histogram(bins=20),
Hitters %>%
ggplot(mapping=aes(x=Salary))+
geom_density())
#Q4a
lm(Salary ~ CHits, data = Hitters)
#Q5
Hits_quan <- quantile(Hitters$CHits, c(0.2, 0.4, 0.6, 0.8))
Hits_quan
cat_CHits <- rep(0, nrow(Hitters))
cat_CHits[Hitters$CHits <= CHits_quan[1]] <- 1
cat_CHits[Hitters$CHits > CHits_quan[1] & Hitters$CHits <= CHits_quan[2]] <- 2
cat_CHits[Hitters$CHits > CHits_quan[2] & Hitters$CHits <= CHits_quan[3]] <- 3
cat_CHits[Hitters$CHits > CHits_quan[3] & Hitters$CHits <= CHits_quan[4]] <- 4
cat_CHits[Hitters$CHits > CHits_quan[4]] <- 5
cat_CHits <- factor(cat_CHits)
cat_CHits <- rep(0, nrow(Hitters))
cat_CHits[Hitters$CHits <= CHits_quan[1]] <- 1
#Q5a
CHits_quan <- quantile(Hitters$CHits, c(0.2, 0.4, 0.6, 0.8))
cat_CHits <- rep(0, nrow(Hitters))
cat_CHits[Hitters$CHits <= CHits_quan[1]] <- 1
cat_CHits[Hitters$CHits > CHits_quan[1] & Hitters$CHits <= CHits_quan[2]] <- 2
cat_CHits[Hitters$CHits > CHits_quan[2] & Hitters$CHits <= CHits_quan[3]] <- 3
cat_CHits[Hitters$CHits > CHits_quan[3] & Hitters$CHits <= CHits_quan[4]] <- 4
cat_CHits[Hitters$CHits > CHits_quan[4]] <- 5
cat_CHits <- factor(cat_CHits)
lm(Salary ~ cat_CHits, data = Hitters)
#Q6
set.seed(1)
index <- sample(nrow(Hitters), nrow(Hitters) * 0.5)
train <- Hitters[index, ]
test <- Hitters[-index, ]
train
Hitters
?Hitters
#Q6a
lm(Salary ~ AtBat + Hits + HmRun + Runs + RBI + Walks +
Years + CAtBat + CHmRun + CRuns + CRBI + CWalks +
League + Division + PutOuts + Assists + Errors +
NewLeague, data = train)
#Q6a
fit <- lm(Salary ~ AtBat + Hits + HmRun + Runs + RBI + Walks +
Years + CAtBat + CHmRun + CRuns + CRBI + CWalks +
League + Division + PutOuts + Assists + Errors +
NewLeague, data = train)
summary(fit)
#Q6a
fit <- lm(Salary ~ AtBat + Hits + HmRun + Runs + RBI + Walks +
Years + CAtBat + CHits + CHmRun + CRuns + CRBI + CWalks +
League + Division + PutOuts + Assists + Errors +
NewLeague, data = train)
#Q6b
summary(fit)
iris_test <- read.csv("iris_test.csv")
#Q8
iris_train <- read.csv("iris_train.csv")
iris_train$versicolor <- as.numeric(iris_train$Species == "versicolor")
iris_test$versicolor <- as.numeric(iris_test$Species == "versicolor")
?glm
#Q6a
fit <- lm(Salary ~ AtBat + Hits + HmRun + Runs + RBI + Walks +
Years + CAtBat + CHits + CHmRun + CRuns + CRBI + CWalks +
League + Division + PutOuts + Assists + Errors +
NewLeague, data = train)
#Q6b
summary(fit)
?predict
#Q7a
mean((train$Salary - predict(fit,train))^2)
#Q7b
mean((test$Salary - predict(fit,test))^2)
predict(fit,train)
#Q7a
train_predict <- predict(fit,train)
mean((train$Salary - train_predict)^2)
#Q6a
fit <- lm(Salary ~ AtBat + Hits + HmRun + Runs + RBI + Walks +
Years + CAtBat + CHits + CHmRun + CRuns + CRBI + CWalks +
League + Division + PutOuts + Assists + Errors +
NewLeague, data = train)
fit
#Q7a
train_predict <- predict(fit,train)
train$Salary
#Q7b
mean((test$Salary - predict(fit,test))^2, na.rm=TRUE)
mean((train$Salary - train_predict)^2, na.rm=TRUE)
#Q7a
mean((train$Salary - predict(fit,train))^2, na.rm=TRUE)
#Q7b
mean((test$Salary - predict(fit,test))^2, na.rm=TRUE)
iris_train
source("~/.Uni Stuff/.Winter 2023/STAT 362/.Assignments/Jacob_Loong_20212958_Asg5.r", echo=TRUE)
log_fit <- glm(versicolor ~ Sepal.Length + Sepal.Width +
Petal.Length + Petal.Width, data = iris_train, family = binomial)
log_fit
source("~/.Uni Stuff/.Winter 2023/STAT 362/.Assignments/Jacob_Loong_20212958_Asg5.r", echo=TRUE)
summary(log_fit)
log_fit
#Q10
prob <- predict(log_fit, iris_test, type = "response")
iris_train
#Q10
prob <- predict(log_fit, iris_test, type = "response")
prob
predicted_class <- ifelse(prob > 0.5,1,0)
table(predicted_class, iris_test$versicolor)
mean(predicted_class == iris_test$versicolor)
set.seed(1)
n <- 1000
X <- rnorm(n, 0.01, 0.05)
Y <- 0.5 * X + rnorm(n, 0, 0.05)
data <- cbind(X, Y)
est_alpha <- function(data, index) {
X <- data[index, 1]
Y <- data[index, 2]
(var(Y) - cov(X, Y)) / (var(X) + var(Y) - 2 * cov(X, Y))
}
boot(return_data, est_alpha, R = 1000)
library(boot)
boot(return_data, est_alpha, R = 1000)
boot(data, est_alpha, R = 1000)
library(boot)
#Q1
set.seed(1)
#Q1
set.seed(1)
n <- 1000
X <- rnorm(n, 0.01, 0.05)
Y <- 0.5 * X + rnorm(n, 0, 0.05)
data <- cbind(X, Y)
est_alpha <- function(data, index) {
X <- data[index, 1]
Y <- data[index, 2]
(var(Y) - cov(X, Y)) / (var(X) + var(Y) - 2 * cov(X, Y))
}
boot(data, est_alpha, R = 1000)
#Q2
concrete <- read.csv("concrete.csv") # write your own path
names(concrete)[1] <- "cement"
set.seed(2)
index <- sample(nrow(concrete), 700) # indices corresponding to the training data
concrete_train <- concrete[index, ]
concrete_test <- concrete[-index, ]
library(tree)
library(tree)
library(tree)
concrete
View(concrete)
concrete_tree <- tree(Conrete ~. , data=concrete_train)
concrete_tree <- tree(strength ~. , data=concrete_train)
concrete_tree
summary(concrete_tree)
